  const searchCorrectWords = (currentFocusedRow: gameTileType[]) => {//search for correct words in the row

    for (let index = 0; index < currentFocusedRow.length; index++) {//checking each column in row
      const letter = currentFocusedRow[index].letter;
      const keyboard = getKeyboardTile(letter);
      if (!keyboard) {
        return;
      }

      if (currentWord.current.includes(letter)) {
        if (currentWord.current[index] === letter) {
          charCount.current[letter] -= 1;
          if (charCount.current[letter] === 0) {
            keyboard.classState = 'keyboard-tile correct';
          }
          if (charCount.current[letter] !== 0 && keyboard.classState === 'keyboard-tile ') {
            keyboard.classState += 'exist';
          }
          currentFocusedRow[index].classState = 'correct';//correct place

        }
        else {
          if (keyboard.classState === 'keyboard-tile ') {
            keyboard.classState += 'exist';
          }
        }
      } else {
        currentFocusedRow[index].classState = 'wrong';
        if ((keyboard.classState === 'keyboard-tile ')) {
          keyboard.classState += 'wrong';
        }
      }
    }

    for (let index = 0; index < currentFocusedRow.length; index++) {//checking each column in row
      const letter = currentFocusedRow[index].letter;
      if (currentWord.current.includes(letter) && currentWord.current[index] !== letter) {
        if (currentFocusedRow[index].classState !== 'correct' && charCount.current[letter] >= 1) {
          currentFocusedRow[index].classState = 'exist';//exist in the given word
          charCount.current[letter] -= 1;
        }
        else {
          currentFocusedRow[index].classState = 'wrong';
        }
      }
    }

  }






  const countCharsInWord = (currentWord: string): { [word: string]: number } => {
    const count: { [word: string]: number } = {};
    for (let i = 0; i < currentWord.length; i++) {
      if (count[currentWord[i]])
        count[currentWord[i]] += 1;
      else {
        count[currentWord[i]] = 1;
      }
    }
    return count;
  }



  const getKeyboardTile = (letter: string): gameTileType => {
    for (let i = 0; i < keyBoardGrid.current.length; i++) {
      for (let j = 0; j < keyBoardGrid.current[i].length; j++) {
        if (letter === keyBoardGrid.current[i][j].letter) {

          return keyBoardGrid.current[i][j];
        }
      }
    }
    return { classState: '', letter: "" }
  }